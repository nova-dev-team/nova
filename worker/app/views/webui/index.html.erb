<%
require 'fileutils'
require 'libvirt'
require 'cgi'
require 'xmlsimple'
require 'uuidtools'
%>

<html>
<head>
<title>Nova worker</title>

<link type="text/css" rel="stylesheet" href="/stylesheets/SyntaxHighlighter.css"></link>
<link type="text/css" rel="stylesheet" href="/stylesheets/custom_buttons.css"></link>
<link type="text/css" rel="stylesheet" href="/stylesheets/webui_style.css"></link>

<script language="javascript" src="/javascripts/shCore.js"></script>
<script language="javascript" src="/javascripts/shBrushXml.js"></script>
<script type="text/javascript" src="/javascripts/jquery-1.3.2.min.js"></script>
<script type="text/javascript" src="/javascripts/jquery.blockUI.js"></script>
<script type="text/javascript" src="/javascripts/jquery.json-1.3.min.js"></script>
<script type="text/javascript" src="/javascripts/vmachine_logic.js"></script>

<script type="text/javascript">

$(document).ready(function () {
  dp.SyntaxHighlighter.HighlightAll('xml_code');

  // these codes are necessary!
  $("input[name=chk_mount_iso]").attr("checked", false);
  $("input[name=chk_agent_cd]").attr("checked", false);

  disable("new_vm_iso_cdrom");
  disable("new_vm_ip_addr");
  disable("new_vm_subnet_mask");
  disable("new_vm_gateway");
  disable("new_vm_dns");
  disable("new_vm_agent_packages");
});

</script>
</head>

<body>

<h1>Nova worker</h1>
<%=
  node_hostname = ""
  if File.exists? "#{RAILS_ROOT}/tmp/hostname"
    node_hostname = "hostname: " + (File.read "#{RAILS_ROOT}/tmp/hostname") + "<br>"
  end
  node_hostname
%>
<%=
  version_name = ""
  if File.exists? "#{RAILS_ROOT}/../VERSION"
    version_name = "version: " + (File.read "#{RAILS_ROOT}/../VERSION") + "<br>"
  end
  version_name
%>
<hr>


<h2>List of all vmachines</h2>

<table width="100%">
<tr>
<td>Name</td>
<td>UUID</td>
<td>Status</td>
<td>VNC port</td>
<td>Actions</td>
</tr>
<%=
info_of_vmachines = ""

all_domains = Vmachine.all_domains

counter = 0

all_domains.each do |dom|
  info_of_vmachines += "<tr class='row_type_#{counter % 2}'><td>#{dom.name}</td>"
  info_of_vmachines += "<td>#{dom.uuid}</td>"
  
  state_text = case dom.info.state
  when VmachinesController::STATE_RUNNING
    "Running"
  when VmachinesController::STATE_SUSPENDED
    "Suspended"
  when VmachinesController::STATE_NOT_RUNNING
    "Not running"
  else
    dom.info.state.to_s
  end
  
  info_of_vmachines += "<td>#{state_text}</td>"
  
  xml_desc = XmlSimple.xml_in dom.xml_desc
  vnc_port = xml_desc['devices'][0]['graphics'][0]['port'].to_s
  if vnc_port == "-1"
    vnc_port = "Not allocated"
  end
  info_of_vmachines += "<td>#{vnc_port}</td><td>"
  
  if dom.info.state == VmachinesController::STATE_RUNNING
    info_of_vmachines += "<button onclick='suspend_vmachine(\"#{dom.uuid}\")'>Suspend</button>\n"
  elsif dom.info.state == VmachinesController::STATE_SUSPENDED
    info_of_vmachines += "<button onclick='resume_vmachine(\"#{dom.uuid}\")'>Resume</button>\n"
  end

  vnc_html = "<button onclick=\"$('#vnc-view-#{dom.uuid}').toggle('fast')\">VNC</button>" if dom.info.state != VmachinesController::STATE_NOT_RUNNING

  info_of_vmachines += <<CONTROLLS_HTML
<button onclick="destroy_vmachine('#{dom.name}', '#{dom.uuid}')">Destroy !!!</button>
<button onclick="$('#xml-def-#{dom.uuid}').toggle('fast')">XML</button>
#{vnc_html || ""}
</td></tr>
CONTROLLS_HTML

  info_of_vmachines += "<tr><td colspan=5><table width='100%' class='code' id='xml-def-#{dom.uuid}' style='display:none;'><tr><td><pre class='xml' name='xml_code' cols='160'>"
  info_of_vmachines += CGI.escapeHTML dom.xml_desc
  info_of_vmachines += "</pre></td></tr></table></td></tr>"

  info_of_vmachines += <<VNC_HTML
<tr><td colspan=5>
<table width='100%' id='vnc-view-#{dom.uuid}' style='display:none;'>
<tr><td>
<applet CODE=VncViewer.class ARCHIVE=vncviewer.jar WIDTH=1024 HEIGHT=768>
  <param name=PORT value=#{vnc_port}>
  <param name=PASSWORD value="All your base are belong to us">
</applet>
</td></tr>
</table>
</tr>
VNC_HTML
  
  counter += 1
end

info_of_vmachines
%>
</table>
<hr>


<h2>Add new vmachine</h2>
<div id="add_new_vmachine_div">
<%
def spacing count = 8
  "&nbsp;" * count
end
%>
Name (a-z, 0-9, '_', '-', '.'): <input type="text" id="new_vm_name" size=28 value="vm_<%=
  time_now = Time.now
  "%04d%02d%02d%02d%02d%02d" % [time_now.year, time_now.month, time_now.day, time_now.hour, time_now.min, time_now.sec]
%>"/><%= spacing 16 %>

UUID: <input type="text" id="new_vm_uuid" size=47 value="<%= UUIDTools::UUID.random_create.to_s %>"/><br>

Hypervisor: <select id="new_vm_hypervisor">
<option value='kvm'>KVM</option>
</select><%= spacing 12 %>

Architecture: <select id="new_vm_arch">
<option value='i686'>i686</option>
<option value='x86_64'>x86_64</option>
</select><%= spacing 9 %>

CPU count: <select id="new_vm_cpu_count">
<%=
html = ""
(1..4).each {|v| html += "<option>#{v}</option>"}
html
%>
</select><%= spacing 10 %>

Memory size (in MB): <input type="text" size="6" id="new_vm_mem_size" value="512" /><br>

Hard disk image: <input type="text" id="new_vm_hda_image" size=40 /><%= spacing 6%>

Save to (optional): <input type="text" id="new_vm_hda_save_to" size=40 /><br>

<input type="checkbox" name="chk_mount_iso" onclick="toggle_mount_iso()" /> Mount .iso CD image?<br>

.iso CD image: <input type="text" id="new_vm_cd_image" size=42 disabled class='disabled_input' /><br>

<input type="checkbox" name="chk_agent_cd" onclick="toggle_agent_cd()" /> Use agent CD?<br>

IP: <input id="new_vm_ip_addr" type="text" size=15 disabled class='disabled_input' /><%= spacing 2 %>
Subnet mask: <input id="new_vm_subnet_mask" type="text" size=15 value="255.255.255.0" disabled class='disabled_input' /><%= spacing 2 %>
Gateway: <input id="new_vm_gateway" type="text" size=15 disabled class='disabled_input' /><%= spacing 2%>
DNS (optional): <input id="new_vm_dns" type="text" size=15 disabled class='disabled_input' /><br>

Packages to be installed (separate with comma or space): <input type="text" id="new_vm_agent_packages" size=69 disabled class='disabled_input' /><br>

<button type="button" class="btn" onclick="add_vmachine()"><span><span>Add new vmachine</span></span></button> <%= spacing 2 %> Current page will be reloaded when clicked.
</div>
<hr>


<h2>Storage server</h2>
<%
def pretty_server_file_list text
  ret = ""

  item_counter = 0
  group_counter = 0

  text.each_line do |line|
    if line.start_with? "ftp://"
      if group_counter > 0
        if item_counter == 0
          ret += "(nothing)"
        end
        ret += "</pre></td></tr></table><br>\n"
      end

      idx = line.index "/", 6
      folder = line[idx..-1].strip
      ret += "Resource in folder: <b>" + folder + "</b><br>\n"
      item_counter = 0
      ret += "<table bgcolor='#EBEBEB' class='code' width='100%'><tr><td><pre>\n"
      group_counter += 1
    else
      splt = line.split
      fn = splt[8]
      size = splt[4].to_i
      next if fn.start_with? "."
      ret += "%-10s%s\n" % [size.to_pretty_file_size, fn]
      item_counter += 1
    end
  end

  if item_counter == 0
    ret += "(nothing)"
  end
  ret += "</pre></td></tr></table>\n"

  return ret
end
%>

<%=
  html_str = ""
  if File.exists? "#{Setting.run_root}/ftp_server_files_list"
    list_data = File.read "#{Setting.run_root}/ftp_server_files_list"
    if list_data =~ /Fatal error: max-retries exceeded/
      html_str = "<b><font color='red'>The storage server is probably down.</font></b>"
    else
      html_str = "<b>Updated at #{File.mtime "#{Setting.run_root}/ftp_server_files_list"}"
      if Time.now - (File.mtime "#{Setting.run_root}/ftp_server_files_list") > 600
        html_str += ", which is a long time ago, <font color='red'>the background file list updater is probably dead.</font>"
      end
      html_str += "</b>"
      html_str += "<br>\n"

      html_str += pretty_server_file_list list_data
    end
  else
    html_str = "The list of server files will be updated later. If you see this message for a long time, the background updating process might be dead."
  end
  html_str
%>
<hr>

<h2>Local resource</h2>

<%
def pretty_du dir
  # TODO make the output prettier
  FileUtils.mkdir_p dir # assure existance of dir
  html = "<pre>"
  pipe = IO.popen "cd #{dir} && du -ah"
  du_output = pipe.readlines.join.chomp
  pipe.close

  size_info = {}
  du_output.each_line do |line|
    splt = line.split
    size_info[splt[1]] = splt[0]
  end

  du_data = du_output.collect {|line| line.split[1]}
  du_sorted = du_data.sort

  item_counter = 0
  du_sorted.each do |item|
    next if item == "."
    html += "%-10s%s\n" % [size_info[item], item]
    item_counter += 1
  end

  if item_counter == 0
    html += "(nothing)"
  end

  html += "</pre>"
  return html
end
%>

<b>Vmachines working directory:</b><br>
du -ah <%=h Setting.vm_root %>
<table bgcolor="#EBEBEB" class="code" width="100%"><tr><td>
<%= pretty_du Setting.vm_root %>
</td></tr></table>
<p>

<b>Image pool directory:</b><br>
du -ah <%=h Setting.image_pool_root %>
<table bgcolor="#EBEBEB" class="code" width="100%"><tr><td>
<%= pretty_du Setting.image_pool_root %>
</td></tr></table>
<hr>

<h2>Vmachines log</h2>
<%= "TODO"
=begin
  vmachines_log_html = "<table width='100%'><tr><td>Vmachine</td><td>Log</td></tr>"
  counter = 0
  # read vmachines logs
  
  vmachines_root = Setting.vmachines_root
  Dir.entries(vmachines_root).each do |entry|
    next if entry.start_with? "."
    begin
      vm_logfile = File.open("#{vmachines_root}/#{entry}/log", "r")
    rescue
      next
    end
    vmachines_log_html += "<tr class='row_type_#{counter % 2}'><td>"
    vmachines_log_html += entry
    vmachines_log_html += "</td><td><pre>"
    vmachines_log_html += vm_logfile.readlines.join.chomp
    vmachines_log_html += "</pre></td></tr>"

    vm_logfile.close
    counter += 1
  end

  vmachines_log_html += "</table>"
  vmachines_log_html
=end
%>
<hr>


<h2>System settings</h2>
<%=
  system_settings_html = "<table width='100%'>\n<tr><td>Key</td><td>Value</td><td>Action</td></tr>\n"
  counter = 0
  (Setting.all.sort {|a, b| a.key <=> b.key}).each do |setting|
    system_settings_html += "<tr class='row_type_#{counter % 2}' height=30><td>"
    system_settings_html += setting.key
    system_settings_html += "</td><td id='sys_setting_holder_#{setting.key}'>"
    system_settings_html += setting.value
    if setting.editable
      system_settings_html += "</td><td><button type='button' class='btn' onclick='change_system_setting(\"#{setting.key}\")'><span><span>Change</span></span></button></td></tr>\n"
    else
      system_settings_html += "</td><td>READ ONLY</td></tr>\n"
    end
    counter += 1
  end
  system_settings_html += "</table>"
  system_settings_html
%>
<hr>

This is the "worker" module of the Nova system. <b>Intended for developers only!</b><p>
&copy;2009-2010 <a href="mailto:santa1987@gmail.com">Santa Zhang</a> &amp; <a href="mailto:herokuankuan@gmail.com">Huang Gang</a>.

</body>
</html>

