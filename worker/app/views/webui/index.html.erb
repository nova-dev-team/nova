<%
require 'fileutils'
require 'libvirt'
require 'cgi'
require 'xmlsimple'
%>

<html>
<head>
<title>Nova worker</title>

<link type="text/css" rel="stylesheet" href="/stylesheets/SyntaxHighlighter.css"></link>
<script language="javascript" src="/javascripts/shCore.js"></script>
<script language="javascript" src="/javascripts/shBrushXml.js"></script>
<script type="text/javascript" src="/javascripts/jquery-1.3.2.min.js"></script>
<script type="text/javascript" src="/javascripts/jquery.json-1.3.min.js"></script>

<style type="text/css" media="screen">

body {
  font-family: "Lucida Grande", "Bitstream Vera Sans", "Verdana";
  font-size: 13px;
  color: #333;
}

a {
  color: #7541dc
}

input, select, textarea {
  margin: 5px 0;
  padding: 5px;
  color: #6A6969;
  border-width: 1px;
  border-style: solid;
  border-color: #D4D4D4 #EBEBEB #EBEBEB #D4D4D4;
  font: 11px 'Lucida Grande', Verdana, Helvetica, sans-serif;
}

table {
  border-spacing: 0px;
}

.code {
  font-family: "Courier New", Courier, monospace;
}

.row_type_1 {

}

.row_type_0 {
  background: #d9ddff;
}
</style>

<script type="text/javascript">

$(document).ready(function () {
  dp.SyntaxHighlighter.HighlightAll('xml_code');
});

function add_vmachine() {
  var arch = $("#new_vm_arch").val();
  var name = $("#new_vm_name").val();
  var mem_size = $("#new_vm_mem_size").val();
  var cpu_count = $("#new_vm_cpu_count").val();
  var hda = $("#new_vm_hda").val();
  var hdb = $("#new_vm_hdb").val();
  var cdrom = $("#new_vm_cdrom").val();
  var extra_depend = $("#extra_depend").val();
  var boot_dev = $("#new_vm_boot_dev").val();
  
  // check args
  if (hda == null || hda == "") {
    alert("You must pick an hda device!");
    return;
  }
  
  if (mem_size == null || mem_size == "") {
    alert("You must provide memory size!");
    return;
  }
  
  vmachine_name_regex = /^([a-z])+([a-z0-9_\.])*$/;
  if (name == null || name == "" || name.length > 20 || vmachine_name_regex.test(name) == false) {
    alert("Invalid vmachine name!");
    return;
  }

  if (boot_dev == "cdrom" && (cdrom == null || cdrom == "")) {
    alert("You must provide a cdrom image, if you wanna boot from it!");
    return;
  }
  
  $.ajax({
    url: "/vmachines/start",
    type: "POST",
    dataType: "json",
    data: {
      arch: arch,
      name: name,
      vcpu: cpu_count,
      mem_size: mem_size,
      hda: hda,
      hdb: hdb,
      cdrom: cdrom,
      depend: extra_depend,
      boot_dev: boot_dev
    },
    success: function(result) {
      if (result.success) {
        window.location.reload();
      } else {
        alert("Error message:" + result.message);
      }
    },
    error: function() {
      alert("Request failed!");
    }
  });
  
}

function vm_ajax(url, uuid) {
  $.ajax({
    url: url,
    type: "POST",
    dataType: "json",
    data: {
      uuid: uuid
    },
    success: function(result) {
      if (result.success) {
        window.location.reload();
      } else {
        alert("Error message:" + result.message);
      }
    },
    error: function() {
      alert("Request failed!");
    }
  });
}

function destroy_vmachine(name, uuid) {
  if (confirm("Are you really going to destroy vmachine named '" + name + "', with UUID=" + uuid + "?")) {
    vm_ajax("/vmachines/destroy.json", uuid);
  }
}

function resume_vmachine(uuid) {
  vm_ajax("/vmachines/resume.json", uuid);
}

function suspend_vmachine(uuid) {
  vm_ajax("/vmachines/suspend.json", uuid);
}

function change_system_setting(key) {
  new_value = prompt("Input the new value for key '" + key + "'.");
  if (new_value && new_value != "") {
    $.ajax({
      url: "/settings/edit",
      type: "POST",
      dataType: "json",
      data: {
        key: key,
        value: new_value
      },
      success: function() {
        window.location.reload();
      },
      error: function() {
        alert("Request failed!");
      }
    });
  }
}
</script>
</head>

<body>

<h1>Nova worker</h1>
<%=
  node_hostname = ""
  if File.exists? "#{RAILS_ROOT}/tmp/hostname"
    node_hostname = "hostname: " + (File.read "#{RAILS_ROOT}/tmp/hostname") + "<br>"
  end
  node_hostname
%>
<%=
  version_name = ""
  if File.exists? "#{RAILS_ROOT}/../VERSION"
    version_name = "version: " + (File.read "#{RAILS_ROOT}/../VERSION") + "<br>"
  end
  version_name
%>
<hr>



<h2>List of all vmachines</h2>

<table width="100%">
<tr>
<td>Name</td>
<td>UUID</td>
<td>Status</td>
<td>VNC port</td>
<td>Actions</td>
</tr>
<%=
info_of_vmachines = ""

all_domains = Vmachine.all_domains

counter = 0

all_domains.each do |dom|
  info_of_vmachines += "<tr class='row_type_#{counter % 2}'><td>#{dom.name}</td>"
  info_of_vmachines += "<td>#{dom.uuid}</td>"
  
  state_text = case dom.info.state
  when VmachinesController::STATE_RUNNING
    "Running"
  when VmachinesController::STATE_SUSPENDED
    "Suspended"
  when VmachinesController::STATE_NOT_RUNNING
    "Not running"
  else
    dom.info.state.to_s
  end
  
  info_of_vmachines += "<td>#{state_text}</td>"
  
  xml_desc = XmlSimple.xml_in dom.xml_desc
  vnc_port = xml_desc['devices'][0]['graphics'][0]['port'].to_s
  if vnc_port == "-1"
    vnc_port = "Not allocated"
  end
  info_of_vmachines += "<td>#{vnc_port}</td><td>"
  
  if dom.info.state == VmachinesController::STATE_RUNNING
    info_of_vmachines += "<button onclick='suspend_vmachine(\"#{dom.uuid}\")'>Suspend</button>\n"
  elsif dom.info.state == VmachinesController::STATE_SUSPENDED
    info_of_vmachines += "<button onclick='resume_vmachine(\"#{dom.uuid}\")'>Resume</button>\n"
  end

  vnc_html = "<button onclick=\"$('#vnc-view-#{dom.uuid}').toggle('fast')\">VNC</button>" if dom.info.state != VmachinesController::STATE_NOT_RUNNING

  info_of_vmachines += <<CONTROLLS_HTML
<button onclick="destroy_vmachine('#{dom.name}', '#{dom.uuid}')">Destroy !!!</button>
<button onclick="$('#xml-def-#{dom.uuid}').toggle('fast')">XML</button>
#{vnc_html || ""}
</td></tr>
CONTROLLS_HTML

  info_of_vmachines += "<tr><td colspan=5><table width='100%' class='code' id='xml-def-#{dom.uuid}' style='display:none;'><tr><td><pre class='xml' name='xml_code' cols='160'>"
  info_of_vmachines += CGI.escapeHTML dom.xml_desc
  info_of_vmachines += "</pre></td></tr></table></td></tr>"

  info_of_vmachines += <<VNC_HTML
<tr><td colspan=5>
<table width='100%' id='vnc-view-#{dom.uuid}' style='display:none;'>
<tr><td>
<applet CODE=VncViewer.class ARCHIVE=vncviewer.jar WIDTH=800 HEIGHT=600>
  <param name=PORT value=#{vnc_port}>
  <param name=PASSWORD value="All your base are belong to us">
</applet>
</td></tr>
</table>
</tr>
VNC_HTML
  
  counter += 1
end


info_of_vmachines
%>
</table>

<hr>

<h2>Add new vmachine</h2>
<%
spacing = "&nbsp;" * 4
%>
Name (a-z, 0-9, '_', '.'): <input type="text" id="new_vm_name" size=30 value="vm_<%=
  time_now = Time.now
  "%04d%02d%02d%02d%02d%02d" % [time_now.year, time_now.month, time_now.day, time_now.hour, time_now.min, time_now.sec]
%>"/><%= spacing %>
UUID: <input type="text" id="new_vm_uuid" size=48 value="<%= UUIDTools::UUID.random_create.to_s %>"/>
<br>
Hypervisor: <select id="new_vm_hypervisor">
<option value='kvm'>KVM</option>
</select><%= spacing %>
Architecture: <select id="new_vm_arch">
<option value='i686'>i686</option>
<option value='x86_64'>x86_64</option>
</select><%= spacing %>
CPU Count: <select id="new_vm_cpu_count">
<%=
html = ""
(1..4).each {|v| html += "<option>#{v}</option>"}
html
%>
</select><%= spacing %>
Memory size: <input type="text" size="4" id="new_vm_mem_size" value="512"/> MB<%= spacing %>
<br>
Hard Disk: <input type="text" id="new_vm_hda"/><br>
IP: <input type="text"/><%= spacing %>Subnet mask: <input type="text" value="255.255.255.0"/><%= spacing %>Gateway: <input type="text"><br>
<button onclick="add_vmachine()">Add</button> Current page will be reloaded when clicked.

<hr>


<h2>Storage server</h2>
<%=
  html_str = ""
  if File.exists? "#{Setting.run_root}/ftp_server_files_list"
    list_data = File.read "#{Setting.run_root}/ftp_server_files_list"
    if list_data =~ /Fatal error: max-retries exceeded/
      html_str = "<font color='red'>The storage server is probably down.</font>"
    else
      html_str = "<b>Updated at #{File.mtime "#{Setting.run_root}/ftp_server_files_list"}</b>\n"
      html_str += "<table bgcolor='#EBEBEB' class='code' width='100%'><tr><td>"
      html_str += "<pre>\n"

      # TODO pretty print the list_data
      html_str += list_data
      html_str += "</pre></td></tr></table>\n"
    end
  else
    html_str = "The list of server files will be updated later. If you see this message for a long time, the background updating process might be dead."
  end
  html_str
%>
<hr>

<h2>Local resource</h2>

Vmachines directory structure:<br>
<b>du -ah <%=h "TODO"
#Setting.vmachines_root
%></b>
<table bgcolor="#EBEBEB" class="code" width="100%"><tr><td>
<%
=begin
FileUtils.mkdir_p Setting.vmachines_root  # assure existance of vmachines directory
dir_listing = ""
pipe = IO.popen("cd #{Setting.vmachines_root} && du -ah")
dir_listing = pipe.readlines.join.chomp
pipe.close
=end
%>
<pre>
<%=h "TODO"
#dir_listing
%>
</pre>
</td></tr></table>
<p>

Cache directory structure:<br>
<b>du -ah <%=h "TODO"
#Setting.storage_cache
%></b>
<table bgcolor="#EBEBEB" class="code" width="100%"><tr><td>
<%
=begin
FileUtils.mkdir_p Setting.storage_cache  # assure existance of vmachines directory
dir_listing = ""
pipe = IO.popen("cd #{Setting.storage_cache} && du -ah")
dir_listing = pipe.readlines.join.chomp
pipe.close
=end
%>
<pre>
<%=h "TODO"
#dir_listing
%>
</pre>
</td></tr></table>
<hr>

<h2>Vmachines log</h2>
<%= "TODO"
=begin
  vmachines_log_html = "<table width='100%'><tr><td>Vmachine</td><td>Log</td></tr>"
  counter = 0
  # read vmachines logs
  
  vmachines_root = Setting.vmachines_root
  Dir.entries(vmachines_root).each do |entry|
    next if entry.start_with? "."
    begin
      vm_logfile = File.open("#{vmachines_root}/#{entry}/log", "r")
    rescue
      next
    end
    vmachines_log_html += "<tr class='row_type_#{counter % 2}'><td>"
    vmachines_log_html += entry
    vmachines_log_html += "</td><td><pre>"
    vmachines_log_html += vm_logfile.readlines.join.chomp
    vmachines_log_html += "</pre></td></tr>"

    vm_logfile.close
    counter += 1
  end

  vmachines_log_html += "</table>"
  vmachines_log_html
=end
%>
<hr>

<h2>System settings</h2>
<%=
  system_settings_html = "<table width='100%'>\n<tr><td>Key</td><td>Value</td><td>Action</td></tr>\n"
  
  counter = 0
  (Setting.all.sort {|a, b| a.key <=> b.key}).each do |setting|
    system_settings_html += "<tr class='row_type_#{counter % 2}'><td>"
    system_settings_html += setting.key
    system_settings_html += "</td><td>"
    system_settings_html += setting.value
    if setting.editable
      system_settings_html += "</td><td><button onclick='change_system_setting(\"#{setting.key}\")'>Change</button></td></tr>\n"
    else
      system_settings_html += "</td><td>READ ONLY</td></tr>\n"
    end
    counter += 1
  end
  system_settings_html += "</table>"
  system_settings_html
%>
<hr>

This is the "worker" module of the Nova system. <b>Intended for developers only</b>.<p>
&copy;2010 <a href="mailto:santa1987@gmail.com">Santa Zhang</a> &amp; <a href="mailto:herokuankuan@gmail.com">Huang Gang</a>.

</body>
</html>

