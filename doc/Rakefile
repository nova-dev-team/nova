require 'fileutils'
require 'pp'
require 'rubygems'
require 'builder'
require 'rdiscount'
require 'uv'

#MIN_SIZE = 1200
MIN_SIZE = 800

def do_replacements(html, type = :html)

  # highlight code
  html = html.gsub /<pre><code>ruby.*?<\/code><\/pre>/m do |code|
    code = code.gsub('<pre><code>ruby', '').gsub('</code></pre>', '').gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&')
    Uv.parse(code, "xhtml", "ruby", false, "mac_classic")
  end

  html
end

desc 'Create the HTML version'
task :html => :merge do
  if File.exists?('output/full_book.markdown')
    output = File.new('output/full_book.markdown').read
    output = RDiscount.new(output).to_html

    ## pdf version ##
    
    # code highlighting
    File.open('output/index.html', 'w') do |f|
      body = do_replacements(output, :pdf)

      html_template = File.new("layout/pdf_template.html").read
      html_template.gsub!("#body", body)
      
      f.puts html_template
    end
    
    ## html version ##
    
    html_dir = 'output/book'
    FileUtils.rm_r(html_dir) rescue nil
    Dir.mkdir(html_dir)
    
    # html chapters
    links = []
    chapter_files = []
    
    count = 0
    sections = output.split('<h1>')
    sections.each do |section|
      # extract title
      title, section = section.split('</h1>')
      next if !section
      count += 1
      title = count.to_s + '. ' + title.strip
      puts title
      
      chlinks = []
      chapters = section.split('<h2>')
      chapters.shift
      chapters.each do |chapter|
        chtitle, chapter = chapter.split('</h2>')
        next if !chapter
        # extract chapter title
        puts "\t" + chtitle.strip
        filename = count.to_s + '_' + chtitle.strip.downcase.gsub(' ', '_') + '.html'
        body = "<h2>#{chtitle}</h2>" + chapter
        body = do_replacements(body, :html)
        chlinks << [chtitle.strip, filename, body.size]
        chapter_files << [chtitle.strip, filename, body]
      end
      links << [title.strip, chlinks]
    end

    # writing out the chapter files
    chapter_files.each_with_index do |arr, index|
      chapter_title, chapter_file, body = arr
      File.open(File.join(html_dir, chapter_file), 'w') do |f|
        nav = ''
        if (cf = chapter_files[index - 1]) && index != 0
          nav += "<a href=\"#{cf[1]}\">Prev</a> "
        end
        if cf = chapter_files[index + 1]
          nav += " <a href=\"#{cf[1]}\">Next</a>"
        end
        html_template = File.new("layout/chapter_template.html").read
        html_template.gsub!("#title", chapter_title)
        html_template.gsub!("#body", body)
        html_template.gsub!("#nav", nav)
        f.puts html_template
      end
    end
    
    toc = Builder::XmlMarkup.new(:indent => 1)
    toc.table { toc.tr { 
      toc.td(:valign => "top") {
        links[0,4].each do |section_title, section_array|
          toc.h3(:class => 'title') { toc << section_title }
          toc.table do
            section_array.each do |chapter_title, chapter_file, chsize|
              toc.tr { toc.td {
                (chsize > MIN_SIZE) ? extra = 'done' : extra = 'todo'
                toc.a(:href => chapter_file, :class => "chapter-link #{extra}") << chapter_title
              }}
            end
          end
        end
      }
      toc.td(:valign => "top") {
        links[4,3].each do |section_title, section_array|
          toc.h3(:class => 'title') { toc << section_title }
          toc.table do
            section_array.each do |chapter_title, chapter_file, chsize|
              toc.tr { toc.td {
                (chsize > MIN_SIZE) ? extra = 'done' : extra = 'todo'
                toc.a(:href => chapter_file, :class => "chapter-link #{extra}") << chapter_title
              }}
            end
          end
        end
      }
    }}    
    File.open('output/book/index.html', 'w') do |f|
      html_template = File.new("layout/book_index_template.html").read
      html_template.gsub!("#body", toc.to_s)
      f.puts html_template
    end
    
    FileUtils.mkdir_p 'output/book/assets'
    
    `cp -Rf images output/book/assets`
    `cp -Rf stylesheets output/book/assets`
    
  end
end

desc 'Merge all of the texttile output into a single file for pdf conversion'
task :merge do
  FileUtils.mkdir_p 'output'
  File.open('output/full_book.markdown', 'w+') do |f|
    Dir["text/**/*.markdown"].sort.each do |path|
      f << File.new(path).read + "\r\n"
    end
  end
end

class Prince

  attr_accessor :exe_path, :style_sheets, :log_file

  # Initialize method
  #
  def initialize()
    # Finds where the application lives, so we can call it.
    @exe_path = `which prince`.chomp
    @style_sheets = ''
    @log_file = "prince.log"
  end

  # Sets stylesheets...
  # Can pass in multiple paths for css files.
  #
  def add_style_sheets(*sheets)
    for sheet in sheets do
      @style_sheets << " -s #{sheet} "
    end
  end

  # Returns fully formed executable path with any command line switches
  # we've set based on our variables.
  #
  def exe_path
    # Add any standard cmd line arguments we need to pass
    @exe_path << " --input=html --server --log=#{@log_file} "
    @exe_path << @style_sheets
    return @exe_path
  end

  # Makes a pdf from a passed in string.
  #
  # Returns PDF as a stream, so we can use send_data to shoot
  # it down the pipe using Rails.
  #
  def pdf_from_string(string)
    puts `pwd`
    path = self.exe_path()
    # Don't spew errors to the standard out...and set up to take IO 
    # as input and output
    path << ' - -o -'

    # Show the command used...
    #logger.info "\n\nPRINCE XML PDF COMMAND"
    #logger.info path
    #logger.info ''

    # Actually call the prince command, and pass the entire data stream back.
    pdf = IO.popen(path, "w+")
    pdf.puts(string)
    pdf.close_write
    output = pdf.gets(nil)
    pdf.close_read
    return output
  end
end

desc 'Create the PDF version'
task :pdf => :html do
  chdir "output"
  prince = Prince.new()
  html_string = File.new("index.html").read
  prince.add_style_sheets '../layout/book.css', 'book/assets/stylesheets/mac_classic.css'

  File.open('book.pdf', 'w') do |f|
    f.puts prince.pdf_from_string(html_string)
  end
end

task :default => :pdf
