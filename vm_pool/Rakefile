# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require(File.join(File.dirname(__FILE__), 'config', 'boot'))

require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

require 'tasks/rails'

require "#{File.dirname __FILE__}/../common/lib/utils.rb"
require "yaml"
require "fileutils"

namespace :nova do
  namespace :vm_pool do

    # Make sure all folders are ready.
    #
    # Since::     0.3
    def prepare_folders
      FileUtils.mkdir_p "#{RAILS_ROOT}/log"
      FileUtils.mkdir_p "#{RAILS_ROOT}/tmp/pids"
    end

    def all_daemons action, rails_env = nil
      Dir["#{RAILS_ROOT}/lib/daemons/*_ctl"].each do |f|
        if rails_env != nil
          my_exec "#{f} #{action} RAILS_ENV=#{rails_env}"
        else
          my_exec "#{f} #{action}"
        end
      end
    end

    desc "Start Nova vm_pool"
    task :start => :stop do
      prepare_folders
      unless File.exists? "#{RAILS_ROOT}/config/INIT_DONE"
        puts "!!!"
        puts "!!! You have'nt initialized vm_pool module!"
        puts "!!! Run 'rake nova:vm_pool:init' first!"
        puts "!!!"
        exit
      end
      puts "Starting Nova vm_pool..."
      my_exec "cd #{RAILS_ROOT}/lib && make"
      unless File.exists? "#{RAILS_ROOT}/log"
        FileUtils.mkdir_p "#{RAILS_ROOT}/log"
      end

      conf = YAML::load File.read "#{RAILS_ROOT}/../common/config/conf.yml"
      if conf["master_use_swiftiply"]
        rails_env = "production"
      else
        rails_env = "development"
      end
      FileUtils.mkdir_p "#{conf["storage_root"]}/ftp_users"

      # boot the daemons
      all_daemons "start", rails_env
      if conf["master_use_swiftiply"]
        # use swiftiply
        # regenerate swiftiply.conf
        swift = File.read "#{RAILS_ROOT}/config/swiftiply.conf"
        my_exec "swiftiply -c config/swiftiply.conf"
        File.open("#{RAILS_ROOT}/config/swiftiply.conf", "w") do |f|
          swift.each_line do |line|
            if line.start_with? "cluster_port"
              f.write "cluster_port: #{conf["master_port"]}\n"
            elsif line.strip.start_with? "outgoing:"
              f.write "    outgoing: 127.0.0.1:#{conf["master_swiftiply_first_port"]}\n"
            else
              f.write line
            end
          end
        end

        # swiftiply will start in 'production' mode
        my_exec "swiftiply_mongrel_rails -n #{conf["master_swiftiply_cluster_size"]} -p #{conf["master_swiftiply_first_port"]} -d &"
      else
        # don't use swiftiply
        my_exec "RAILS_ENV=#{rails_env} #{RAILS_ROOT}/script/server -d -p #{conf["master_port"]} &"
      end

      my_exec "#{RAILS_ROOT}/lib/log_cleaner.rb &"

      # start vnc_proxy
      my_exec "#{RAILS_ROOT}/../tools/server_side/bin/vnc_proxy -p #{conf["vm_vnc_port"]} -s #{RAILS_ROOT}/tmp/sockets/vnc_proxy.sock -pf #{RAILS_ROOT}/log/vnc_proxy.pid"
    end

    desc "Stop Nova server"
    task :stop do
      prepare_folders
      all_daemons "stop"
      
      kill_by_pid_file "#{RAILS_ROOT}/tmp/pids/server.pid"
      
      my_exec "killall swiftiply"
      my_exec "killall mongrel_rails"
      my_exec "killall vnc_proxy"
      my_exec "rm -rf #{RAILS_ROOT}/log/*.local_port"
      my_exec "rm -f #{RAILS_ROOT}/tmp/sockets/vnc_proxy.sock"

      Dir.foreach("#{RAILS_ROOT}/log") do |entry|
        if entry.end_with? ".pid"
          fpath = "#{File.dirname __FILE__}/log/#{entry}"
          kill_by_pid_file fpath
        end
      end

      Dir.foreach("#{RAILS_ROOT}/tmp/pids") do |entry|
        if entry.end_with? ".pid"
          fpath = "#{File.dirname __FILE__}/tmp/pids/#{entry}"
          kill_by_pid_file fpath
        end
      end
    end

    desc "Initialize system"
    task :init do
      prepare_folders
      puts "Migrating database..."
      my_exec "rake db:migrate RAILS_ENV=production"
      my_exec "rake db:migrate RAILS_ENV=development"
      my_exec "rake db:migrate:reset RAILS_ENV=production"
      my_exec "rake db:migrate:reset RAILS_ENV=development"
      puts "Loading data..."
      my_exec "rake db:fixtures:load RAILS_ENV=production"
      my_exec "rake db:fixtures:load RAILS_ENV=development"
      my_exec "cd #{RAILS_ROOT}/lib && make"
      File.open("#{RAILS_ROOT}/config/INIT_DONE", "w").write ""
    end

  end
end

