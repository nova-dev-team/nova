# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require(File.join(File.dirname(__FILE__), 'config', 'boot'))

require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

require 'tasks/rails'

require "#{File.dirname __FILE__}/../common/lib/utils.rb"
require "yaml"

namespace :nova do
  namespace :master do

    # Make sure all folders are ready.
    #
    # Since::     0.3
    def prepare_folders
      conf = YAML::load File.read "#{File.dirname __FILE__}/../common/config/conf.yml"
      FileUtils.mkdir_p conf["run_root"]
      FileUtils.mkdir_p "#{RAILS_ROOT}/log"
      FileUtils.mkdir_p "#{RAILS_ROOT}/tmp/pids"
    end

    # Controls the daemon processes
    #
    # Since::     0.3
    def all_daemons action, rails_env = nil
      Dir["#{RAILS_ROOT}/lib/daemons/*_ctl"].each do |f|
        if rails_env != nil
          my_exec "#{f} #{action} RAILS_ENV=#{rails_env}"
        else
          my_exec "#{f} #{action}"
        end
      end
    end

    desc "Start Nova master"
    task :start => :stop do
      prepare_folders
      
      unless File.exists? "#{RAILS_ROOT}/config/INIT_DONE"
        puts "!!!"
        puts "!!! The master module has not been initialized yet!"
        puts "!!! Run 'rake nova:master:init' to initialize the master module."
        puts "!!!"
        exit
      end

      puts "Starting Nova master..."
      my_exec "cd #{RAILS_ROOT}/lib && make" # prepare tools

      conf = YAML::load File.read "#{File.dirname __FILE__}/../common/config/conf.yml"
      if conf["master_use_swiftiply"]
        rails_env = "production"
      else
        rails_env = "development"
      end
      # boot the daemons
      all_daemons "start", rails_env

      if conf["storage_type"] == "ftp"
        # boot the ftp files list updater
        File.open("#{conf["run_root"]}/ftp_server_files_list_updater_lftp_script", "w") do |f|
          f.write <<LFTP_SCRIPT
set net:timeout 10
set net:max-retries 2
set net:reconnect-interval-base 1
open #{File.read "#{RAILS_ROOT}/config/storage_server.conf"}
cd /vdisks
pwd
ls
cd /agent_packages
pwd
ls
LFTP_SCRIPT
        my_exec "#{RAILS_ROOT}/lib/ftp_server_files_list_updater #{RAILS_ROOT}/tmp/pids/ftp_server_files_list_updater.pid #{conf["run_root"]}"
        end
      elsif conf["storage_type"] == "nfs"
        # boot the NSS monitor
        my_exec "#{RAILS_ROOT}/lib/nss_is_run.rb"

        # boot the auto balancer
        my_exec "#{RAILS_ROOT}/lib/load_balance.rb"
      else
        # storage type not known!
        puts "!!!"
        puts "!!! Server config error! Unknown storage type #{conf["storage_type"]}!"
        puts "!!!"
        exit 1
      end

      if conf["master_use_swiftiply"]
        # use swiftiply

        # regenerate swiftiply.conf
        swift = File.read "#{File.dirname __FILE__}/config/swiftiply.conf"
        my_exec "swiftiply -c config/swiftiply.conf"
        File.open("#{File.dirname __FILE__}/config/swiftiply.conf", "w") do |f|
          swift.each_line do |line|
            if line.start_with? "cluster_port"
              f.write "cluster_port: #{conf["master_port"]}\n"
            elsif line.strip.start_with? "outgoing:"
              f.write "    outgoing: 127.0.0.1:#{conf["master_swiftiply_first_port"]}\n"
            else
              f.write line
            end
          end
        end

        my_exec "swiftiply_mongrel_rails -n #{conf["master_swiftiply_cluster_size"]} -p #{conf["master_swiftiply_first_port"]} -d &"

      else
        # don't use swiftiply
        my_exec "RAILS_ENV=#{rails_env} #{File.dirname __FILE__}/script/server -d -p #{conf["master_port"]} &"
      end

      my_exec "#{RAILS_ROOT}/lib/log_cleaner.rb"

      # start vnc_proxy
      my_exec "#{RAILS_ROOT}/../tools/server_side/bin/vnc_proxy -p #{conf["vm_vnc_port"]} -s #{RAILS_ROOT}/tmp/sockets/vnc_proxy.sock -pf #{RAILS_ROOT}/log/vnc_proxy.pid"
    end

    desc "Stop Nova server"
    task :stop do
      prepare_folders

      all_daemons "stop"
      my_exec "killall swiftiply"
      my_exec "killall mongrel_rails"
      my_exec "killall vnc_proxy"
      my_exec "rm -f #{RAILS_ROOT}/tmp/sockets/vnc_proxy.sock"

      Dir.foreach("#{File.dirname __FILE__}/log") do |entry|
        if entry.end_with? ".pid"
          fpath = "#{File.dirname __FILE__}/log/#{entry}"
          puts (File.read fpath)
          kill_by_pid_file fpath
        end
      end

      Dir.foreach("#{File.dirname __FILE__}/tmp/pids") do |entry|
        if entry.end_with? ".pid"
          fpath = "#{File.dirname __FILE__}/tmp/pids/#{entry}"
          puts (File.read fpath)
          kill_by_pid_file fpath
        end
      end
    end

    desc "Initialize system"
    task :init do
      prepare_folders
      puts "Migrating database..."
      my_exec "rake db:migrate RAILS_ENV=production"
      my_exec "rake db:migrate RAILS_ENV=development"
      my_exec "rake db:migrate:reset RAILS_ENV=production"
      my_exec "rake db:migrate:reset RAILS_ENV=development"
      puts "Loading data..."
      my_exec "rake db:fixtures:load RAILS_ENV=production"
      my_exec "rake db:fixtures:load RAILS_ENV=development"
      my_exec "touch #{RAILS_ROOT}/config/INIT_DONE"
    end

  end
end

