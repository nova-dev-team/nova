<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="do_init(event)">
	
	<mx:Script>
		<![CDATA[
			
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import nova.GlobalConst;
			
			
			[Bindable]
			protected var clusterListData:ArrayList = new ArrayList();
			
			[Bindable]
			protected var machineListData:ArrayList = new ArrayList();

			protected function do_init(event:FlexEvent):void
			{
				list_Cluster_Request.send();
			}
			
			protected function listClusters(e:ResultEvent):void {
				var ret:Object = JSON.decode(e.message.body.toString());
				if (ret.success) {
					clusterListData.removeAll();
					for (var i:Number = 0; i < ret.data.length; i++) {
						clusterListData.addItem(ret.data[i].name);
					}
				} else {
					Alert.show("Failed to retrieve list of clusters!");	
				}
			}
			
			protected function listMachines(e:ResultEvent):void {
				var ret:Object = JSON.decode(e.message.body.toString());
				if (ret.success) {
					machineListData.removeAll();
					machines_holder.removeAllChildren();
					
					for (var i:Number = 0; i < ret.machines.length; i++) {
						machineListData.addItem(ret.machines[i]);
						var row:GridRow = new GridRow();
						var col1:GridItem = new GridItem();
						var lbl:Label = new Label();
						lbl.text = String(i);
						col1.addChild(lbl);
						var col2:GridItem = new GridItem();
						var machineSection:WorkspaceClusterMachine = new WorkspaceClusterMachine();
						var machine:Object = ret.machines[i];
						machineSection.setMachineParams(machine.name, machine.cpu_count, machine.mem_size, machine.disk_image, machine.uuid, machine.soft_list, machine.status);
						col2.addChild(machineSection);
						row.addChild(col1);
						row.addChild(col2);
						machines_holder.addChild(row);
					}
					cluster_owner_label.text = "Owner: " + ret.owner;
					cluster_ip_range.text = "Cluster IP range: ";
					if (ret.first_ip != ret.last_ip) {
						cluster_ip_range.text += ret.first_ip + " ~ " + ret.last_ip;
					} else {
						cluster_ip_range.text += ret.first_ip;
					}
					cluster_size_label.text = "Cluster size: " + ret.size;
					
					
				} else {
					Alert.show("Failed to retrieve list of machines!");	
				}
			}

			protected function refresh_cluster_list_btn_clickHandler(event:MouseEvent):void
			{
				list_Cluster_Request.send();
			}
			
			
			protected function cluster_list_changeHandler(event:ListEvent):void
			{
				cluseter_name_label.text = "Cluster: " + cluster_list.selectedItem.toString();
				show_Cluster_Request.send({
					"name" : cluster_list.selectedItem.toString()
				});
			}


			protected function refresh_machine_list_btn_clickHandler(event:MouseEvent):void
			{
				show_Cluster_Request.send({
					"name" : cluster_list.selectedItem.toString()
				});
			}

		]]>
	</mx:Script>
	
	<mx:List x="25" y="73" height="456"  dataProvider="{clusterListData}" id="cluster_list" change="cluster_list_changeHandler(event)"></mx:List>
	<mx:Label x="29" y="38" text="Clusters"/>
	<mx:Button x="25" y="537" click="refresh_cluster_list_btn_clickHandler(event)" id="refresh_cluster_list_btn" label="Refresh"/>
	<mx:Button x="892" y="537" label="Refresh" id="refresh_machine_list_btn" click="refresh_machine_list_btn_clickHandler(event)"/>

	<mx:Label x="219" y="38" id="cluseter_name_label"/>
	<mx:Label x="219" y="71" id="cluster_size_label"/>
	<mx:Label x="220" y="102" id="cluster_owner_label"/>
	<mx:Label x="219" y="132" id="cluster_ip_range"/>
	<mx:Button x="219" y="158" label="Destroy cluster!" id="destroy_cluster_btn"/>
	
	<mx:Grid x="218" y="188" id="machines_holder" width="735" height="341">
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem width="100%" height="72">
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
	
	<mx:HTTPService id="list_Cluster_Request" url="{GlobalConst.vclusters_list}" useProxy="false" method="GET" resultFormat="text" result="listClusters(event);" showBusyCursor="true" />
	<mx:HTTPService id="show_Cluster_Request" url="{GlobalConst.vclusters_show}" useProxy="false" method="GET" resultFormat="text" result="listMachines(event);" showBusyCursor="true" />
	
	
</mx:Canvas>
