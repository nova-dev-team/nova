# Helper Rakefile for ndss project
# Author: Santa Zhang


desc "Report status"
task "stats" do
  puts "TODO report status"
end

desc "Check coding style"
task "check" do
  puts "TODO check coding style"
end

# a helper function, generates obj file list for make file
def obj_targets_from folder
  targets = []
  Dir.entries(folder).each do |e|
    if e =~ /\.c$/
      fn = e[0..-3]
      targets << "obj/#{folder}_#{fn}.obj"
    end
  end
  return targets
end

def hfile_full_path hfile
  # find .h file in "xdk" & "core"
  Dir.entries("xdk").each do |e|
    return "xdk/#{hfile}" if hfile == e
  end

  Dir.entries("core").each do |e|
    return "core/#{hfile}" if hfile == e
  end

  Dir.entries("include").each do |e|
    return "include/#{hfile}" if hfile == e
  end

  Dir.entries("app").each do |e|
    return "app/#{hfile}" if hfile == e
  end

  raise "File '#{hfile}' not found!"
end

def depend_hfiles src_file
  hfiles = []
  File.open(src_file, "r") do |f|
    f.each_line do |line|
      line = line.strip
      if line =~ /^#include \"/
        hfile = line[10..-2]
        puts src_file + " depends on " + (hfile_full_path hfile)
        hfiles << (hfile_full_path hfile)
      end
    end
  end
  return hfiles
end

def depend_obj_files src_file
  hfiles = depend_hfiles src_file
end

def test_targets_build_rules
  rules = ""
  all_test_targets.collect do |target|
    src_file = "test/" + target[4..-1] + ".c"
    hfiles = depend_hfiles src_file
    objfiles = hfiles.collect do |h|
      splt = h.split '/'
      if splt[0] == "xdk"
        "obj/libxdk.a"
      elsif splt[0] == "core"
        "obj/libndss.a"
      elsif splt[0] == "include"
        "obj/lib" + splt[1][0..-3] + ".a"
      else
        "obj/" + splt[0] + "_" + splt[1][0..-3] + ".obj"
      end
    end
    objfiles = objfiles.uniq
    rules += "#{target}: #{src_file} #{hfiles.collect {|h| h + " "}} #{objfiles.collect {|obj| obj + " "}}\n"
    rules += "\t$(CC) $(CFLAGS) #{src_file} #{objfiles.collect {|obj| obj + " "}} -o #{target}\n\n"
  end
  return rules
end

def obj_targets_build_rules_from folder
  rules = ""
  (obj_targets_from folder).collect do |obj|
    fn = File.basename obj
    fn = fn[(folder.length + 1)..-5] + ".c" # removes "$(folder)_" prefix & ".obj" postfix, then add ".c" post fix
    rules += "#{obj}: #{folder}/#{fn} #{(depend_hfiles "#{folder}/#{fn}").collect {|f| f + " "}}\n"
    rules += "\t$(CC) $(CFLAGS) -c #{folder}/#{fn} -o #{obj}\n\n"
  end
  return rules
end

def all_test_targets
  targets = []
  Dir.entries("test").each do |e|
    if e =~ /^test_.*\.c/
      targets << ("bin/" + e[0..-3])
    end
  end
  return targets
end

desc "Generate Makefile & include files"
task "gen" do
  # gen make file
  File.open("Makefile", "w") do |mf|
    mf.write <<MF_EOF
# WARNING! This file is automatically generated by "rake gen".
# WARNING! Any modification to it would be lost after another "rake gen" operation!

# Automatically generated at #{Time.now}

CC=gcc
CFLAGS=-Wall -Ixdk -Icore -Iinclude

all: prepare ndss

prepare: bin obj

bin:
	mkdir -p bin

obj:
	mkdir -p obj

xdk: obj/libxdk.a

obj/libxdk.a: #{(obj_targets_from "xdk").collect {|obj| obj + " "}}
	ar cq obj/libxdk.a $^
	ranlib obj/libxdk.a

#{obj_targets_build_rules_from "xdk"}

ndss: bin/ndss

obj/libndss.a: #{(obj_targets_from "core").collect {|obj| obj + " "}}
	ar cq obj/libndss.a $^
	ranlib obj/libndss.a

bin/ndss: obj/libndss.a obj/libxdk.a #{(obj_targets_from "app").collect {|obj| obj + " "}}
	$(CC) $(CFLAGS) obj/libndss.a obj/libxdk.a #{(obj_targets_from "app").collect {|obj| obj + " "}} -o bin/ndss

#{obj_targets_build_rules_from "core"}

#{obj_targets_build_rules_from "app"}

test: prepare ndss xdk #{all_test_targets.collect {|target| target + " "}}

#{test_targets_build_rules}

clean:
	rm -rf bin
	rm -rf obj

MF_EOF
  end

  # gen include files
  `mkdir -p include`
  File.open("include/README", "w") do |f|
    f.write <<INCLUDE_README
All files in this folder is automatically generated by "rake gen". Any modification
to these files would be lost after another "rake gen" operation!

Automatically generated at #{Time.now}
INCLUDE_README
  end

  File.open("include/xdk.h", "w") do |f|
    include_list = ""

    Dir.entries("xdk").each do |e|
      # NOTE could blacklist unwanted .h files
      include_list += "#include \"../xdk/#{e}\"\n" if e =~ /\.h$/
    end

    f.write <<INCLUDE_XDK
// WARNING! This file is automatically generated by "rake gen".
// WARNING! Any modification to it would be lost after another "rake gen" operation!

// Automatically generated at #{Time.now}

#ifndef XDK_H_
#define XDK_H_

#{include_list}
#endif
INCLUDE_XDK
  end

  File.open("include/ndss.h", "w") do |f|
    include_list = ""

    Dir.entries("core").each do |e|
      # NOTE could blacklist unwanted .h files
      include_list += "#include \"../core/#{e}\"\n" if e =~ /\.h$/
    end

    f.write <<INCLUDE_NDSS
// WARNING! This file is automatically generated by "rake gen".
// WARNING! Any modification to it would be lost after another "rake gen" operation!

// Automatically generated at #{Time.now}

#ifndef NDSS_H_
#define NDSS_H_

#{include_list}
#endif
INCLUDE_NDSS
  end

end


desc "Run all test cases"
task "test" do
  system "make test"
  result = {}
  Dir.entries("bin").each do |e|
    if e =~ /^test_/
      puts "== running test 'bin/#{e}' =="
      ret = system "cd bin && ./#{e}"
      result[e] = ret
      if ret
        puts "-- success --\n\n"
      else
        puts "-- failure --\n\n"
      end
    end
  end

  puts "\n\n=== final report ===\n"
  puts "-- success:\n"
  result.each do |k, v|
    puts "  #{k}" if v == true
  end
  puts "\n-- failure:\n"
  result.each do |k, v|
    puts "* #{k}" if v == false
  end
end

task "default" do
  puts "Run 'rake -T' to get list of functions"
  puts "Run 'rake gen' to generate Makefile"
end
